// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SisOdonto.Infrastructure.Context;

namespace SisOdonto.Infrastructure.Migrations.SisOdonto
{
    [DbContext(typeof(SisOdontoContext))]
    partial class SisOdontoContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SisOdonto.Domain.Entities.HealthInsurance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("HealthInsurances");
                });

            modelBuilder.Entity("SisOdonto.Domain.Entities.Scheduling", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("Datetime")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("DentistId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Obs")
                        .HasColumnType("varchar(100)");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DentistId");

                    b.HasIndex("PatientId");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("SisOdonto.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("BirthDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Complement")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SisOdonto.Domain.Entities.Attendant", b =>
                {
                    b.HasBaseType("SisOdonto.Domain.Entities.User");

                    b.Property<string>("Cellular")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.ToTable("Attendants");
                });

            modelBuilder.Entity("SisOdonto.Domain.Entities.Dentist", b =>
                {
                    b.HasBaseType("SisOdonto.Domain.Entities.User");

                    b.Property<string>("Cro")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Expertise")
                        .HasColumnType("int");

                    b.ToTable("Dentists");
                });

            modelBuilder.Entity("SisOdonto.Domain.Entities.Patient", b =>
                {
                    b.HasBaseType("SisOdonto.Domain.Entities.User");

                    b.Property<string>("Cellular")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<Guid>("HealthInsuranceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MaritalStatus")
                        .HasColumnType("int");

                    b.Property<string>("Occupation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telephone")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("HealthInsuranceId")
                        .IsUnique()
                        .HasFilter("[HealthInsuranceId] IS NOT NULL");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("SisOdonto.Domain.Entities.Scheduling", b =>
                {
                    b.HasOne("SisOdonto.Domain.Entities.Dentist", "Dentist")
                        .WithMany("Schedules")
                        .HasForeignKey("DentistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SisOdonto.Domain.Entities.Patient", "Patient")
                        .WithMany("Schedules")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dentist");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("SisOdonto.Domain.Entities.Attendant", b =>
                {
                    b.HasOne("SisOdonto.Domain.Entities.User", null)
                        .WithOne()
                        .HasForeignKey("SisOdonto.Domain.Entities.Attendant", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SisOdonto.Domain.Entities.Dentist", b =>
                {
                    b.HasOne("SisOdonto.Domain.Entities.User", null)
                        .WithOne()
                        .HasForeignKey("SisOdonto.Domain.Entities.Dentist", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SisOdonto.Domain.Entities.Patient", b =>
                {
                    b.HasOne("SisOdonto.Domain.Entities.HealthInsurance", "HealthInsurance")
                        .WithOne()
                        .HasForeignKey("SisOdonto.Domain.Entities.Patient", "HealthInsuranceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SisOdonto.Domain.Entities.User", null)
                        .WithOne()
                        .HasForeignKey("SisOdonto.Domain.Entities.Patient", "Id")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("HealthInsurance");
                });

            modelBuilder.Entity("SisOdonto.Domain.Entities.Dentist", b =>
                {
                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("SisOdonto.Domain.Entities.Patient", b =>
                {
                    b.Navigation("Schedules");
                });
#pragma warning restore 612, 618
        }
    }
}
